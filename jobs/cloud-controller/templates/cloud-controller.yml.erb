<%-
  ccdb = link('cloud_controller_db').p('ccdb')
  db = ccdb.fetch('databases').find { |db| db.fetch('tag') == 'cc' }
  db_user = ccdb.fetch('roles').find { |role| role.fetch('tag') == 'admin' }
  db_scheme = ccdb.fetch('db_scheme')
  connection_string = case db_scheme
  when 'postgres'
    "host=#{ccdb.fetch('address')} port=#{ccdb.fetch('port')} user=#{db_user.fetch('name')} dbname=#{db.fetch('name')} password=#{db_user.fetch('password')} sslmode=disable"
  when 'mysql'
    "#{db_user.fetch('name')}:#{db_user.fetch('password')}@tcp(#{ccdb.fetch('address')}:#{ccdb.fetch('port')})/#{db.fetch('name')}?tls=false&parseTime=true"
  else
    raise "ccdb.db_scheme #{db_scheme} is not supported"
  end

  system_domain = link('cloud_controller_internal').p('system_domain')
  uaa_url = p('uaa.url', "#{p('login.protocol')}://uaa.#{system_domain}")
  login_url = p('login.enabled') ? p('login.url', "#{p('login.protocol')}://login.#{system_domain}") : uaa_url
-%>
listen: 127.0.0.1:8282
external_domain: <%= link('cloud_controller_internal').p('cc.external_host') %>.<%= system_domain %>
external_protocol: <%= link('cloud_controller_internal').p('cc.external_protocol') %>
info:
  name: "<%= p('name') %>"
  build: "<%= p('build') %>"
  version: <%= p('version') %>
  support_address: "<%= p('support_address') %>"
  description: "<%= p('description') %>"
db:
  connection_string: <%= connection_string %>
  type: <%= db_scheme %>
  create: false
  migrate: false
log:
  level: debug
  production: false
uaa:
  url: <%= "https://#{p('uaa.internal_url')}:#{p('uaa.tls_port')}" %>
  client:
    tls_config:
      ca_file: /var/vcap/jobs/cloud-controller/tls/uaa/ca.crt
urls:
  log_stream: https://log-stream.<%= system_domain %>
  log_cache: https://log-cache.<%= system_domain %>
  doppler: ws<%= 's' if p('doppler.use_ssl') %>://doppler.<%= system_domain %>:<%= p('doppler.port') %>
  login: <%= login_url %>
  uaa: <%= uaa_url %>
app_ssh:
  endpoint: <%= "ssh.#{system_domain}:#{p('app_ssh.port')}" %>
  oauth_client: <%= p('app_ssh.oauth_client_id') %>
  host_key_fingerprint: <%= p('app_ssh.host_key_fingerprint', nil) %>